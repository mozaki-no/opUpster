*** a/pom.xml
--- b/pom.xml
@@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.opupster</groupId>
-  <artifactId>opUpster</artifactId>
-  <version>0.1.0-SNAPSHOT</version>
-  <properties>
-    <maven.compiler.source>17</maven.compiler.source>
-    <maven.compiler.target>17</maven.compiler.target>
-  </properties>
-  <!-- 既存のdependencies/plugins があれば残してOK -->
-</project>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>org.springframework.boot</groupId>
+    <artifactId>spring-boot-starter-parent</artifactId>
+    <version>3.3.4</version>
+    <relativePath/> <!-- lookup parent from repository -->
+  </parent>
+
+  <groupId>com.opupster</groupId>
+  <artifactId>opupster</artifactId>
+  <version>0.2.0-SNAPSHOT</version>
+  <name>opUpster</name>
+  <description>CLI-first tool with Spring Boot (Java 17), structured logging, tests, and CI</description>
+
+  <properties>
+    <java.version>17</java.version>
+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+  </properties>
+
+  <dependencies>
+    <!-- Core (web-application-type=NONE でCLIとして起動) -->
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter</artifactId>
+    </dependency>
+    <!-- 将来Web UIを足すときに有効化: spring-boot-starter-web を追加予定 -->
+
+    <!-- ロギング（Logbackはstarter同梱）＋JSON出力用エンコーダ -->
+    <dependency>
+      <groupId>net.logstash.logback</groupId>
+      <artifactId>logstash-logback-encoder</artifactId>
+      <version>7.4</version>
+    </dependency>
+
+    <!-- CLIの引数パース（あとでSpring ShellやPicocli連携も可能） -->
+    <dependency>
+      <groupId>info.picocli</groupId>
+      <artifactId>picocli</artifactId>
+      <version>4.7.6</version>
+    </dependency>
+
+    <!-- テスト -->
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-test</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.mockito</groupId>
+      <artifactId>mockito-core</artifactId>
+      <version>5.13.0</version>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-maven-plugin</artifactId>
+        <configuration>
+          <mainClass>com.opupster.OpUpsterApplication</mainClass>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>
*** /dev/null
--- b/src/main/java/com/opupster/OpUpsterApplication.java
@@
+package com.opupster;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.boot.CommandLineRunner;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import com.opupster.controller.CliController;
+
+@SpringBootApplication
+public class OpUpsterApplication {
+    private static final Logger log = LoggerFactory.getLogger(OpUpsterApplication.class);
+
+    public static void main(String[] args) {
+        SpringApplication.run(OpUpsterApplication.class, args);
+    }
+
+    // CLI起動: spring.main.web-application-type=NONE にしておけばコンソールアプリ
+    @Bean
+    @ConditionalOnProperty(name = "app.mode", havingValue = "cli", matchIfMissing = true)
+    CommandLineRunner runCli(@Autowired CliController cli) {
+        return args -> {
+            long start = System.currentTimeMillis();
+            cli.run(args); // 既存の処理呼び出しはCliController経由に寄せる
+            log.info("finished in ms={}", (System.currentTimeMillis() - start));
+        };
+    }
+}
*** /dev/null
--- b/src/main/java/com/opupster/controller/CliController.java
@@
+package com.opupster.controller;
+
+import com.opupster.service.OpService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Component;
+import picocli.CommandLine;
+import picocli.CommandLine.Command;
+import picocli.CommandLine.Option;
+
+@Component
+public class CliController {
+    private static final Logger log = LoggerFactory.getLogger(CliController.class);
+    private final CommandLine cmd;
+
+    public CliController(OpService service) {
+        this.cmd = new CommandLine(new RootCommand(service));
+    }
+
+    public void run(String[] args) {
+        int exit = cmd.execute(args);
+        if (exit != 0) {
+            throw new IllegalStateException("CLI finished with non-zero exit code: " + exit);
+        }
+    }
+
+    @Command(name = "op", mixinStandardHelpOptions = true,
+             version = "opUpster 0.2",
+             description = "opUpster CLI")
+    static class RootCommand implements Runnable {
+        private final OpService service;
+        RootCommand(OpService service) { this.service = service; }
+
+        @Option(names = {"-v","--version"}, description = "Show version and exit")
+        boolean showVersion;
+
+        @Option(names = {"-d","--debug"}, description = "Enable debug logs")
+        boolean debug;
+
+        @Override public void run() {
+            if (showVersion) {
+                System.out.println("opUpster 0.2.0");
+                return;
+            }
+            if (debug) {
+                // 実運用ではprofileやログレベル切替で対応（ここは簡易スイッチ）
+                System.setProperty("logging.level.root", "DEBUG");
+            }
+            service.execute(); // とりあえずの入口（既存処理はServiceへ）
+        }
+    }
+}
*** /dev/null
--- b/src/main/java/com/opupster/service/OpService.java
@@
+package com.opupster.service;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Service;
+
+@Service
+public class OpService {
+    private static final Logger log = LoggerFactory.getLogger(OpService.class);
+
+    // ここに既存のビジネスロジック呼び出しを寄せる
+    public void execute() {
+        log.info("start execute");
+        // TODO: 既存の処理を徐々に移設
+        // 例: 読み込み→変換→送信 を明確なメソッドに分割し、ステップごとにINFOログ
+        log.info("done execute");
+    }
+}
*** /dev/null
--- b/src/main/resources/application.yml
@@
+spring:
+  main:
+    web-application-type: none   # CLIモードで起動
+  output:
+    ansi:
+      enabled: DETECT
+
+logging:
+  level:
+    root: INFO
+  pattern:
+    console: "%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} %-5level [%thread] %logger - %msg%n"
+
+# カスタム
+app:
+  mode: cli
*** /dev/null
--- b/src/main/resources/logback-spring.xml
@@
+<?xml version="1.0" encoding="UTF-8"?>
+<configuration scan="true" scanPeriod="30 seconds">
+  <!-- JSON構造化ログ（開発中は見やすいpattern、運用はJSONへ切替 例: profile=prod） -->
+  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
+    <encoder>
+      <pattern>%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} %-5level [%thread] %logger - %msg%n</pattern>
+    </encoder>
+  </appender>
+
+  <!-- JSON用（必要に応じて spring.profiles.active=prod で切替） -->
+  <appender name="JSON" class="ch.qos.logback.core.ConsoleAppender">
+    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
+      <providers>
+        <timestamp/>
+        <pattern>
+          <pattern>
+            {
+              "level": "%level",
+              "logger": "%logger",
+              "thread": "%thread",
+              "message": "%message"
+            }
+          </pattern>
+        </pattern>
+        <arguments/>
+        <stackTrace/>
+      </providers>
+    </encoder>
+  </appender>
+
+  <root level="INFO">
+    <appender-ref ref="CONSOLE" />
+    <!-- 運用でJSON使うなら上をコメントアウトしてこちらを有効化 -->
+    <!-- <appender-ref ref="JSON" /> -->
+  </root>
+</configuration>
*** /dev/null
--- b/src/test/java/com/opupster/service/OpServiceTest.java
@@
+package com.opupster.service;
+
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
+
+class OpServiceTest {
+    @Test
+    void execute_shouldRunWithoutException() {
+        var svc = new OpService();
+        assertDoesNotThrow(svc::execute);
+    }
+}
*** /dev/null
--- b/.github/workflows/ci.yml
@@
+name: Build and Test
+on:
+  push:
+    branches: [ main, develop, "feature/**", "feat/**" ]
+  pull_request:
+    branches: [ main, develop ]
+jobs:
+  build:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+      - name: Set up JDK 17
+        uses: actions/setup-java@v4
+        with:
+          distribution: temurin
+          java-version: "17"
+          cache: maven
+      - name: Build & Test
+        run: ./mvnw -B -DskipTests=false clean verify
